This dataset contains information about different customers and their purchases. It includes the following columns:

1. item_id: A unique identifier for each item purchased.
2. price: The price of the item purchased.
3. age: The age of the customer who made the purchase.
4. customer_name: The name of the customer.
5. customer_email: The email address of the customer.
6. Age_Group: The age group of the customer (e.g., 18-25, 26-35, etc.).
7. Customer_Type: Describes whether the customer is a "high spender," "medium spender," or "low spender."
8. Price_Range: Categorizes the price of the item into different ranges like "high," "low," or "medium."
9. Customer_Status: Indicates whether the customer is "Active" or "Inactive."

There are some missing values in the dataset where data for certain fields (such as price, item_id, or age) is not provided for some records. and price column contains some outliers also.

steps performed in data cleaning:

1: first of all i found out the duplicate rows in data set and removed them using "df.drop_duplicates()".

2: then i checked for the presence of missing values in daataset and removed the rows containing the missing values.

3: then i used the IQR method to remove the outliers present in the dataset.

4: now for correcting any kind of typos in categorical columns i wrote a standarization code for updating the values
   of the categorical columns.


# then i stored the cleaned data set in another file "cleaned_data.csv" and used it for EDA.


Steps preformed in EDA:

1. Load Data:
   - Load the dataset using `pd.read_csv()`;

2. Univariate Analysis (Price & Age):
   - Display statistical summary (`describe()`) for "price" and "age" columns.
   - Calculate "skewnes", "standard deviation", and "variance" for both.
   
   print(df['price'].describe())
   print(df['age'].describe())
 

3.Frequency Distribution:
   - Group data by "Age_Group", "Customer_Status", "Price_Range", and "Customer_Type" to check frequencies.
   
   data3 = df.groupby(['Age_Group']).size()
   data4 = df.groupby(['Customer_Status']).size()

4. Visualize Distribution:
   - Use "bar plots", "box plots", and "violin plots" for each categorical variable (e.g., "Age_Group", "Customer_Status").

   sns.barplot(x=data3.index, y=data3.values)
   sns.boxplot(x='Age_Group', y='price', data=df)
   sns.violinplot(x='Customer_Type', y='price', data=df)

5. Bivariate Analysis:
   - Correlation matrix and scatter plot for "price" and "age".
 
   print(df[['price', 'age']].corr())
   df.plot.scatter(x='age', y='price', s=10)

6. Group by Categories (Mean & Median):
   - Group by "Age_Group", "Customer_Type", and "Price_Range" and calculate mean/median for "price" and "age"

   grouped = df.groupby(['Age_Group', 'Customer_Type', 'Price_Range']).agg(
       price_mean=('price', 'mean'),
       price_median=('price', 'median'),
       age_mean=('age', 'mean'),
       age_median=('age', 'median')
   )


7. Combined Visualizations:
   - Heatmap for "price" and "age" correlation.
   - Pair plot for relationships between variables.
  
   sns.heatmap(df[['price', 'age']].corr(), annot=True)
   sns.pairplot(df)

8. Box and Violin Plots for Price Distribution:
   - Use box plots and violin plots to show "price" distribution across different customer types and price ranges.

   sns.boxplot(x='Customer_Type', y='price', data=df)
   sns.violinplot(x='Customer_Type', y='price', data=df)
